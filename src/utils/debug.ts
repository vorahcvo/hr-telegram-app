import { supabase, supabaseAnon } from '../lib/supabase';
import { logger } from './logger';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
declare global {
  interface Window {
    debugCreateUser: () => void;
    debugCheckUser: () => void;
    debugResetUser: () => void;
    debugTestConnection: () => void;
    debugTestFetch: () => void;
    debugTestSimpleFetch: () => void;
    debugPingServer: () => void;
  }
}

export const debugCreateUser = async () => {
  logger.info('üîß DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é');
  
  try {
    const tgUser = (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
    if (!tgUser) {
      logger.error('‚ùå DEBUG: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const newUser = {
      user_id: tgUser.id,
      name: `${tgUser.first_name} ${tgUser.last_name || ''}`.trim(),
      username: tgUser.username || null,
      avatar: tgUser.photo_url || null,
    };

    logger.info('üìù DEBUG: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è', newUser);

    const { data: createdUser, error } = await supabase
      .from('users')
      .insert(newUser)
      .select()
      .single();

    if (error) {
      logger.error('‚ùå DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è', error);
    } else {
      logger.success('‚úÖ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', createdUser);
    }
  } catch (error) {
    logger.error('‚ùå DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏', error);
  }
};

export const debugCheckUser = async () => {
  logger.info('üîß DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  try {
    const tgUser = (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
    if (!tgUser) {
      logger.error('‚ùå DEBUG: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const { data: user, error } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', tgUser.id)
      .single();

    if (error) {
      logger.error('‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', error);
    } else {
      logger.success('‚úÖ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω', user);
    }
  } catch (error) {
    logger.error('‚ùå DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ', error);
  }
};

export const debugResetUser = () => {
  logger.info('üîß DEBUG: –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  localStorage.removeItem('supabase.auth.token');
  window.location.reload();
};

export const debugTestConnection = async () => {
  logger.info('üîß DEBUG: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase');
  
  try {
    // –¢–µ—Å—Ç —Å SERVICE_ROLE_KEY
    logger.info('üîå DEBUG: –¢–µ—Å—Ç —Å SERVICE_ROLE_KEY');
    const { data: serviceData, error: serviceError } = await supabase
      .from('users')
      .select('count')
      .limit(1);
    
    logger.info('üìä DEBUG: SERVICE_ROLE_KEY —Ä–µ–∑—É–ª—å—Ç–∞—Ç', { data: serviceData, error: serviceError });

    // –¢–µ—Å—Ç —Å ANON_KEY
    logger.info('üîå DEBUG: –¢–µ—Å—Ç —Å ANON_KEY');
    const { data: anonData, error: anonError } = await supabaseAnon
      .from('users')
      .select('count')
      .limit(1);
    
    logger.info('üìä DEBUG: ANON_KEY —Ä–µ–∑—É–ª—å—Ç–∞—Ç', { data: anonData, error: anonError });

  } catch (error) {
    logger.error('‚ùå DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', error);
  }
};

export const debugTestFetch = async () => {
  logger.info('üîß DEBUG: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ fetch');
  
  try {
    const response = await fetch('http://5.129.230.57:8000/rest/v1/users?select=count&limit=1', {
      headers: {
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzQ1MDEwMDAsImV4cCI6MTkwMjc3NjQwMH0.LlGieQIb8ukhfR_qGM0yUBLWy1BYE9jno76YkLJBmRU',
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzQ1MDEwMDAsImV4cCI6MTkwMjc3NjQwMH0.LlGieQIb8ukhfR_qGM0yUBLWy1BYE9jno76YkLJBmRU',
        'Content-Type': 'application/json'
      }
    });
    
    logger.info('üì° DEBUG: Fetch status', response.status);
    logger.info('üì° DEBUG: Fetch headers', Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      const data = await response.json();
      logger.success('‚úÖ DEBUG: Fetch —É—Å–ø–µ—à–µ–Ω', data);
    } else {
      const errorText = await response.text();
      logger.error('‚ùå DEBUG: Fetch failed', { status: response.status, text: errorText });
    }
  } catch (error) {
    logger.error('‚ùå DEBUG: Fetch exception', error);
  }
};

export const debugTestSimpleFetch = async () => {
  logger.info('üîß DEBUG: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ fetch –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å
    logger.info('üåê DEBUG: –¢–µ—Å—Ç 1 - –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å');
    const response1 = await fetch('http://5.129.230.57:8000/rest/v1/');
    logger.info('üì° DEBUG: –¢–µ—Å—Ç 1 status', response1.status);
    
    // –¢–µ—Å—Ç 2: GET –∑–∞–ø—Ä–æ—Å —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    logger.info('üåê DEBUG: –¢–µ—Å—Ç 2 - GET —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏');
    const response2 = await fetch('http://5.129.230.57:8000/rest/v1/users', {
      headers: {
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzQ1MDEwMDAsImV4cCI6MTkwMjc3NjQwMH0.LlGieQIb8ukhfR_qGM0yUBLWy1BYE9jno76YkLJBmRU'
      }
    });
    logger.info('üì° DEBUG: –¢–µ—Å—Ç 2 status', response2.status);
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    logger.info('üåê DEBUG: –¢–µ—Å—Ç 3 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞');
    const response3 = await fetch('http://5.129.230.57:8000/');
    logger.info('üì° DEBUG: –¢–µ—Å—Ç 3 status', response3.status);
    
  } catch (error) {
    logger.error('‚ùå DEBUG: –ü—Ä–æ—Å—Ç–æ–π fetch exception', error);
  }
};

export const debugPingServer = async () => {
  logger.info('üîß DEBUG: –ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π ping –±–µ–∑ –ø–æ—Ä—Ç–∞
    logger.info('üåê DEBUG: –¢–µ—Å—Ç 1 - Ping –±–µ–∑ –ø–æ—Ä—Ç–∞');
    try {
      const response1 = await fetch('http://5.129.230.57/', { 
        method: 'HEAD',
        mode: 'no-cors' // –ü—Ä–æ–±—É–µ–º –æ–±–æ–π—Ç–∏ CORS
      });
      logger.info('üì° DEBUG: –¢–µ—Å—Ç 1 - HEAD –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (error1) {
      logger.error('‚ùå DEBUG: –¢–µ—Å—Ç 1 - HEAD –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è', error1);
    }
    
    // –¢–µ—Å—Ç 2: Ping —Å –ø–æ—Ä—Ç–æ–º 8000
    logger.info('üåê DEBUG: –¢–µ—Å—Ç 2 - Ping —Å –ø–æ—Ä—Ç–æ–º 8000');
    try {
      const response2 = await fetch('http://5.129.230.57:8000/', { 
        method: 'HEAD',
        mode: 'no-cors'
      });
      logger.info('üì° DEBUG: –¢–µ—Å—Ç 2 - HEAD –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (error2) {
      logger.error('‚ùå DEBUG: –¢–µ—Å—Ç 2 - HEAD –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è', error2);
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ image (—á–∞—Å—Ç–æ –æ–±—Ö–æ–¥–∏—Ç CORS)
    logger.info('üåê DEBUG: –¢–µ—Å—Ç 3 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ image');
    try {
      const img = new Image();
      img.onload = () => {
        logger.success('‚úÖ DEBUG: –¢–µ—Å—Ç 3 - Image –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      };
      img.onerror = () => {
        logger.error('‚ùå DEBUG: –¢–µ—Å—Ç 3 - Image –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å');
      };
      img.src = 'http://5.129.230.57:8000/favicon.ico?' + Date.now();
    } catch (error3) {
      logger.error('‚ùå DEBUG: –¢–µ—Å—Ç 3 - Image exception', error3);
    }
    
  } catch (error) {
    logger.error('‚ùå DEBUG: Ping exception', error);
  }
};

// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫ window
if (typeof window !== 'undefined') {
  window.debugCreateUser = debugCreateUser;
  window.debugCheckUser = debugCheckUser;
  window.debugResetUser = debugResetUser;
  window.debugTestConnection = debugTestConnection;
  window.debugTestFetch = debugTestFetch;
  window.debugTestSimpleFetch = debugTestSimpleFetch;
  window.debugPingServer = debugPingServer;
}