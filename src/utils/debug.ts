import { supabase, supabaseServiceRole, testSupabaseConnection } from '../lib/supabase';
import { logger } from './logger';
import { SUPABASE_CONFIG } from '../config/env';

// Global debug functions for browser console and in-app debugging

export const debugCreateUser = async () => {
  logger.info('üîß DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  try {
    const tgUser = (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
    if (!tgUser) {
      logger.error('‚ùå DEBUG: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const newUser = {
      user_id: tgUser.id,
      name: `${tgUser.first_name} ${tgUser.last_name || ''}`.trim(),
      username: tgUser.username || null,
      avatar: tgUser.photo_url || null,
    };

    const { data, error } = await supabase
      .from('users')
      .insert(newUser)
      .select()
      .single();

    if (error) {
      logger.error('‚ùå DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
    } else {
      logger.success('‚úÖ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', data);
    }
  } catch (e: any) {
    logger.error('‚ùå DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e);
  }
};

export const debugCheckUser = async () => {
  logger.info('üîß DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  try {
    const tgUser = (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
    if (!tgUser) {
      logger.error('‚ùå DEBUG: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('user_id', tgUser.id)
      .single();

    if (error) {
      logger.error('‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
    } else {
      logger.success('‚úÖ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω', data);
    }
  } catch (e: any) {
    logger.error('‚ùå DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e);
  }
};

export const debugResetUser = async () => {
  logger.info('üîß DEBUG: –°–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  try {
    const tgUser = (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
    if (!tgUser) {
      logger.error('‚ùå DEBUG: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const { error } = await supabase
      .from('users')
      .delete()
      .eq('user_id', tgUser.id);

    if (error) {
      logger.error('‚ùå DEBUG: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
    } else {
      logger.success('‚úÖ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
    }
  } catch (e: any) {
    logger.error('‚ùå DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e);
  }
};

export const debugTestConnection = async () => {
  logger.info('üîß DEBUG: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase');
  
  // Test with SERVICE_ROLE_KEY
  const serviceResult = await testSupabaseConnection('service_role');
  
  // Test with ANON_KEY
  const anonResult = await testSupabaseConnection('anon');
  
  logger.info('üìä DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', {
    service_role: serviceResult,
    anon: anonResult
  });
};

export const debugTestFetch = async () => {
  logger.info('üîß DEBUG: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ fetch');
  try {
    const response = await fetch(`${SUPABASE_CONFIG.url}/rest/v1/users?select=*&limit=1`, {
      headers: {
        'apikey': SUPABASE_CONFIG.anonKey,
        'Authorization': `Bearer ${SUPABASE_CONFIG.anonKey}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    logger.success('‚úÖ DEBUG: Fetch —É—Å–ø–µ—à–µ–Ω', { status: response.status, data });
  } catch (e: any) {
    logger.error('‚ùå DEBUG: Fetch exception', e);
  }
};

export const debugTestSimpleFetch = async () => {
  logger.info('üîß DEBUG: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ fetch –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤');
  
  // Test 1: Simple GET request
  logger.info('üåê DEBUG: –¢–µ—Å—Ç 1 - –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å');
  try {
    const response = await fetch(`${SUPABASE_CONFIG.url}/rest/v1/users?select=*&limit=1`);
    const data = await response.json();
    logger.success('‚úÖ DEBUG: –ü—Ä–æ—Å—Ç–æ–π fetch —É—Å–ø–µ—à–µ–Ω', { status: response.status, data });
  } catch (e: any) {
    logger.error('‚ùå DEBUG: –ü—Ä–æ—Å—Ç–æ–π fetch exception', e);
  }
};

export const debugPingServer = async () => {
  logger.info('üîß DEBUG: –ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
  const baseUrl = SUPABASE_CONFIG.url;
  const ip = SUPABASE_CONFIG.url.replace('http://', '').replace('https://', '').split(':')[0];

  // Test 1: HEAD request to base URL without port
  logger.info('üåê DEBUG: –¢–µ—Å—Ç 1 - Ping –±–µ–∑ –ø–æ—Ä—Ç–∞');
  try {
    const url = `http://${ip}/`;
    const response = await fetch(url, { method: 'HEAD', mode: 'no-cors' });
    logger.success('‚úÖ DEBUG: –¢–µ—Å—Ç 1 - HEAD –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω', { status: response.status });
  } catch (e: any) {
    logger.error('‚ùå DEBUG: –¢–µ—Å—Ç 1 - HEAD –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è', e);
  }

  // Test 2: HEAD request to URL with port 8000
  logger.info('üåê DEBUG: –¢–µ—Å—Ç 2 - Ping —Å –ø–æ—Ä—Ç–æ–º 8000');
  try {
    const url = `${baseUrl}/`;
    const response = await fetch(url, { method: 'HEAD', mode: 'no-cors' });
    logger.success('‚úÖ DEBUG: –¢–µ—Å—Ç 2 - HEAD –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω', { status: response.status });
  } catch (e: any) {
    logger.error('‚ùå DEBUG: –¢–µ—Å—Ç 2 - HEAD –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è', e);
  }

  // Test 3: Image load test (bypasses CORS)
  logger.info('üåê DEBUG: –¢–µ—Å—Ç 3 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ image');
  try {
    const img = new Image();
    img.src = `${baseUrl}/favicon.ico?${Date.now()}`;
    await new Promise((resolve, reject) => {
      img.onload = () => {
        logger.success('‚úÖ DEBUG: –¢–µ—Å—Ç 3 - Image –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        resolve(true);
      };
      img.onerror = (e) => {
        logger.error('‚ùå DEBUG: –¢–µ—Å—Ç 3 - Image –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å', e);
        reject(e);
      };
    });
  } catch (e) {
    // Error already logged by onerror
  }

  // Test 4: Script load test (bypasses CORS)
  logger.info('üåê DEBUG: –¢–µ—Å—Ç 4 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ script');
  try {
    const script = document.createElement('script');
    script.src = `${baseUrl}/some-non-existent-script.js?${Date.now()}`;
    await new Promise((resolve, reject) => {
      script.onload = () => {
        logger.success('‚úÖ DEBUG: –¢–µ—Å—Ç 4 - Script –∑–∞–≥—Ä—É–∂–µ–Ω');
        resolve(true);
      };
      script.onerror = (e) => {
        logger.error('‚ùå DEBUG: –¢–µ—Å—Ç 4 - Script –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è', e);
        reject(e);
      };
      document.head.appendChild(script);
    });
  } catch (e) {
    // Error already logged by onerror
  }
};

// Make functions globally available
(window as any).debugCreateUser = debugCreateUser;
(window as any).debugCheckUser = debugCheckUser;
(window as any).debugResetUser = debugResetUser;
(window as any).debugTestConnection = debugTestConnection;
(window as any).debugTestFetch = debugTestFetch;
(window as any).debugTestSimpleFetch = debugTestSimpleFetch;
(window as any).debugPingServer = debugPingServer;