import { useState, useEffect, useRef } from 'react';
import { supabase, supabaseAnon } from '../lib/supabase';
import { useTelegram } from './useTelegram';
import { logger } from '../utils/logger';
import { User } from '../types';

export const useUser = () => {
  const { user: tgUser } = useTelegram();
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const initializationRef = useRef(false);
  const effectRunCount = useRef(0);

  // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä
  logger.info('üîÑ useUser —Ä–µ–Ω–¥–µ—Ä', { 
    tgUser: tgUser ? { id: tgUser.id, first_name: tgUser.first_name } : null,
    currentUser: user ? { id: user.id, name: user.name } : null,
    loading,
    error,
    initializationRef: initializationRef.current,
    effectRunCount: effectRunCount.current
  });

  // –û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç - —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ tgUser
  useEffect(() => {
    effectRunCount.current += 1;
    logger.info('üéØ useUser useEffect —Å—Ä–∞–±–æ—Ç–∞–ª', { 
      runCount: effectRunCount.current,
      tgUser: tgUser ? { id: tgUser.id, first_name: tgUser.first_name } : null,
      hasTgUser: !!tgUser,
      loading,
      error,
      initializationRef: initializationRef.current
    });
    
    if (!tgUser) {
      logger.warning('‚ö†Ô∏è –ù–µ—Ç tgUser, –æ–∂–∏–¥–∞–Ω–∏–µ...');
      return;
    }

    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.info('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    initializationRef.current = false;

    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    initializationRef.current = true;
    initializeUser();
  }, [tgUser]); // –£–±–∏—Ä–∞–µ–º user –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  const initializeUser = async () => {
    if (!tgUser) {
      logger.error('‚ùå –ù–µ—Ç tgUser –≤ initializeUser');
      setLoading(false);
      return;
    }

    logger.info('üîç –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { 
      user_id: tgUser.id,
      first_name: tgUser.first_name,
      last_name: tgUser.last_name,
      username: tgUser.username 
    });

    try {
      setError(null);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å SERVICE_ROLE_KEY
      logger.info('üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å SERVICE_ROLE_KEY');
      try {
        const { data: testData, error: testError } = await supabase
          .from('users')
          .select('count')
          .limit(1);

        if (testError) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å SERVICE_ROLE_KEY', testError);
        } else {
          logger.success('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å SERVICE_ROLE_KEY —É—Å–ø–µ—à–Ω–æ');
        }
      } catch (serviceError) {
        logger.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å SERVICE_ROLE_KEY', serviceError);
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å ANON_KEY
      logger.info('üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å ANON_KEY');
      try {
        const { data: testDataAnon, error: testErrorAnon } = await supabaseAnon
          .from('users')
          .select('count')
          .limit(1);

        if (testErrorAnon) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å ANON_KEY', testErrorAnon);
        } else {
          logger.success('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å ANON_KEY —É—Å–ø–µ—à–Ω–æ');
        }
      } catch (anonError) {
        logger.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å ANON_KEY', anonError);
      }

      // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π fetch –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      logger.info('üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π fetch –∫ Supabase');
      try {
        const response = await fetch(`${supabase.supabaseUrl}/rest/v1/users?select=count&limit=1`, {
          headers: {
            'apikey': supabase.supabaseKey,
            'Authorization': `Bearer ${supabase.supabaseKey}`,
            'Content-Type': 'application/json'
          }
        });
        
        logger.info('üì° Fetch response status:', response.status);
        logger.info('üì° Fetch response headers:', Object.fromEntries(response.headers.entries()));
        
        if (response.ok) {
          const data = await response.json();
          logger.success('‚úÖ Fetch —É—Å–ø–µ—à–µ–Ω', data);
        } else {
          const errorText = await response.text();
          logger.error('‚ùå Fetch failed', { status: response.status, text: errorText });
        }
      } catch (fetchError) {
        logger.error('‚ùå Fetch exception', fetchError);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å SERVICE_ROLE_KEY
      logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å SERVICE_ROLE_KEY');
      const { data: existingUser, error: fetchError } = await supabase
        .from('users')
        .select('*')
        .eq('user_id', tgUser.id)
        .single();

      logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', { 
        existingUser: existingUser ? { id: existingUser.id, name: existingUser.name } : null, 
        fetchError: fetchError ? { code: fetchError.code, message: fetchError.message } : null 
      });

      if (fetchError && fetchError.code !== 'PGRST116') {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', fetchError);
        setError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${fetchError.message}`);
        setLoading(false);
        return;
      } else if (existingUser) {
        logger.success('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω', { 
          id: existingUser.id, 
          name: existingUser.name,
          user_id: existingUser.user_id 
        });
        setUser(existingUser);
      } else {
        logger.info('üÜï –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = {
          user_id: tgUser.id,
          name: `${tgUser.first_name} ${tgUser.last_name || ''}`.trim(),
          username: tgUser.username || null,
          avatar: tgUser.photo_url || null,
        };

        logger.info('üìù –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏', newUser);

        const { data: createdUser, error: createError } = await supabase
          .from('users')
          .insert(newUser)
          .select()
          .single();

        logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { 
          createdUser: createdUser ? { id: createdUser.id, name: createdUser.name } : null, 
          createError: createError ? { code: createError.code, message: createError.message } : null 
        });

        if (createError) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', createError);
          setError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createError.message}`);
          setLoading(false);
          return;
        } else {
          logger.success('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', { 
            id: createdUser.id, 
            name: createdUser.name,
            user_id: createdUser.user_id 
          });

          // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          logger.info('üîó –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
          const { error: sourceError } = await supabase
            .from('sources')
            .insert({
              user_id: tgUser.id,
              name: '–û—Ç–∫–ª–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏',
              status: 'active',
              is_default: true,
            });

          if (sourceError) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', sourceError);
          } else {
            logger.success('‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
          }

          setUser(createdUser);
        }
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ initializeUser', error);
      setError(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      logger.info('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ loading –≤ false');
      setLoading(false);
    }
  };

  const updateUser = async (updates: Partial<User>) => {
    if (!user) {
      logger.warning('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }

    logger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', updates);

    try {
      const { data: updatedUser, error } = await supabase
        .from('users')
        .update({ ...updates, updated_at: new Date().toISOString() })
        .eq('id', user.id)
        .select()
        .single();

      if (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
        throw error;
      }

      logger.success('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', updatedUser);
      setUser(updatedUser);
      return updatedUser;
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
      throw error;
    }
  };

  const hasRequisites = user && (user.inn || user.corporate_card || user.account_number || user.bik);

  // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  logger.info('üìã –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ useUser', { 
    user: user ? { id: user.id, name: user.name, user_id: user.user_id } : null, 
    loading, 
    error,
    hasRequisites: !!hasRequisites 
  });

  return {
    user,
    loading,
    error,
    updateUser,
    hasRequisites: !!hasRequisites,
  };
};