import { useState, useEffect, useRef } from 'react';
import { supabase } from '../lib/supabase';
import { User } from '../types';
import { logger } from '../utils/logger';

interface UseUserReturn {
  user: User | null;
  loading: boolean;
  error: string | null;
  hasRequisites: boolean;
}

export const useUser = (): UseUserReturn => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [hasRequisites, setHasRequisites] = useState(false);
  const initializationRef = useRef(false);

  useEffect(() => {
    const initializeUser = async () => {
      if (initializationRef.current) return;
      initializationRef.current = true;

      try {
        const tgUser = (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
        
        if (!tgUser) {
          logger.info('üîß DEBUG: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          setLoading(false);
          return;
        }

        logger.info('üîß DEBUG: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { tgUser });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const { data: existingUser, error: fetchError } = await supabase
          .from('users')
          .select('*')
          .eq('user_id', tgUser.id)
          .single();

        if (fetchError && fetchError.code !== 'PGRST116') {
          logger.error('‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', fetchError);
          setError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${fetchError.message}`);
          setLoading(false);
          return;
        }

        if (existingUser) {
          logger.success('‚úÖ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω', existingUser);
          setUser(existingUser);
          setHasRequisites(!!existingUser.requisites);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const newUser = {
            user_id: tgUser.id,
            name: `${tgUser.first_name} ${tgUser.last_name || ''}`.trim(),
            username: tgUser.username || null,
            avatar: tgUser.photo_url || null,
          };

          logger.info('üîß DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', newUser);

          const { data: createdUser, error: createError } = await supabase
            .from('users')
            .insert(newUser)
            .select()
            .single();

          if (createError) {
            logger.error('‚ùå DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', createError);
            setError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createError.message}`);
            setLoading(false);
            return;
          }

          logger.success('‚úÖ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', createdUser);
          setUser(createdUser);
          setHasRequisites(false);
        }
      } catch (error: any) {
        logger.error('‚ùå DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
        setError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      } finally {
        setLoading(false);
      }
    };

    initializeUser();
  }, []);

  return {
    user,
    loading,
    error,
    hasRequisites
  };
};